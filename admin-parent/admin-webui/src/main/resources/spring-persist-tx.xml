<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!--  配置自动扫描组件，把service交给 IOC容器管理  -->
    <context:component-scan base-package="com.crowd.service"/>

    <!--  配置事务管理器  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--  配置事务切面 -->
    <aop:config>
        <!--  * *..*ServiceImpl.*(..) : 定位任意返回类型，多层次包下的serviceImpl实现类的任意方法      -->
        <aop:pointcut id="txPointcut" expression="execution(* *..*ServiceImpl.*(..))"/>

        <!-- 将切入点表达式和事务关联 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!--  配置事务通知  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 配置事务属性 -->
        <tx:attributes>
            <!-- 查询方法，配置只读属性，数据库进行查询优化 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>

            <!-- 增删改方法，配置事务传播行为，回滚异常 -->
            <!--
                     propagation属性：
                            REQUIRED:默认值,表示当前方法必须工作在事务中，如果当前线程没有开启事务，则自己新开事务，
                                如果已经有了事务，使用当前事务。
                              顾虑：用别人的事务可能“被”回滚
                            REQUIRES_NEW：建议使用值，表示当前方法必须工作在事务中，如果当前线程没有开启事务，则自己新开事务。
                                已经有事务，依旧新开事务。
                              好处：不会受到其他事务回滚影响
             -->

            <!-- rollback-for：配置事务针对什么样的异常回滚
                    默认：运行时异常回滚
                    建议：任何异常都回滚
             -->

            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>

        </tx:attributes>
    </tx:advice>
</beans>




























